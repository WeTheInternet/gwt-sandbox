/**
 *
 */
package com.google.gwt.core.ext.linker.impl;

import com.google.gwt.core.ext.Linker;
import com.google.gwt.core.ext.LinkerContext;
import com.google.gwt.core.ext.TreeLogger;
import com.google.gwt.core.ext.UnableToCompleteException;
import com.google.gwt.core.ext.linker.ArtifactSet;
import com.google.gwt.core.ext.linker.EmittedArtifact.Visibility;
import com.google.gwt.core.ext.linker.GeneratedSource;
import com.google.gwt.core.ext.linker.LinkerOrder;
import com.google.gwt.core.ext.linker.LinkerOrder.Order;
import com.google.gwt.core.ext.linker.SyntheticArtifact;

import java.nio.charset.Charset;

/**
 * This linker is used to collect up all {@link GeneratedSource} artifacts, and emit a manifest
 * file that will tell Super Dev Mode where to find any missing injected source files.
 * <p>
 * This linker is neither tested nor used with any permutations; it is primarily used for
 * code generated by magic method injectors, who would create a single shell class to defer to;
 * if any permutation-specific rebinds are needed, the standard GWT.create() mechanism would be used.
 *
 * @author James X. Nelson (james@wetheinter.net, @james)
 *
 */
@LinkerOrder(Order.PRE)
public class GeneratedSourceLinker extends Linker {

  @Override
  public String getDescription() {
    return "Save generated source manifest";
  }

  @Override
  public ArtifactSet link(TreeLogger logger, LinkerContext context, ArtifactSet artifacts)
      throws UnableToCompleteException {
    artifacts = new ArtifactSet(artifacts);
    StringBuilder b = new StringBuilder();
    for (GeneratedSource generatedSource : artifacts.find(GeneratedSource.class)) {
      // This is the typename that SuperDevMode will receive, so we will go ahead and coerce it here
      String typeName = generatedSource.getTypeName().replace('.', '/')+".java";
      b
        .append(typeName)
        .append('=')
        .append(generatedSource.getFileName())
        .append('\n');
    }

    byte[] result = b.toString().getBytes(Charset.forName("utf-8"));
    final SyntheticArtifact manifest = new SyntheticArtifact(getClass(), "generated.properties", result);
    manifest.setVisibility(Visibility.Deploy);
    artifacts.add(manifest);

    return artifacts;
  }

}
